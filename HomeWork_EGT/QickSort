
void print(int* data, const int& size)
{
    for (int i = 0; i < size; i++)
    {
        std::cout << data[i] << ' ';
    }
    std::cout << '\n';
}
void swap(int& left, int& right)
{
    int temp = left;
    left = right;
    right = temp;
}


// function to rearrange array (find the partition point)
int partition(int* data, int left, int right)
{

    // select the rightmost element as pivot
    int pivot = data[right];

    // pointer for greater element
    int i = (left - 1);

    // traverse each element of the array
    // compare them with the pivot
    for (int k = left; k < right; k++)
    {
        if (data[k] <= pivot)
        {

            // if element smaller than pivot is found
            // swap it with the greater element pointed by i
            i++;

            // swap element at i with element at j
            swap(data[i], data[k]);
        }
    }

    // swap pivot with the greater element at i
    swap(data[i + 1], data[right]);

    // return the partition point
    return (i + 1);
}

void quickSort(int* data, const int& begin, const int& end)
{
    if (begin < end)
    {

        // find the pivot element such that
        // elements smaller than pivot are on left of pivot
        // elements greater than pivot are on righ of pivot
        int pi = partition(data, begin, end);

        // recursive call on the left of pivot
        quickSort(data, begin, pi - 1);

        // recursive call on the right of pivot
        quickSort(data, pi + 1, end);
    }
}
