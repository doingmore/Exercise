// To heapify a subtree rooted with node i
// which is an index in arr[].
// n is size of heap
void heapify(int arr[],const int& size,const int& i)
{
    // Initialize largest as root
    int largest = i;
    // left = 2*i + 1

    int L = 2 * i + 1;
    // right = 2*i + 2
    int R = 2 * i + 2;
    // If left child is larger than root
    if (L < size && arr[L] > arr[largest])
    {
        largest = L;
    }
    // If right child is larger than largest
    // so far
    if (R < size && arr[R] > arr[largest])
    {
        largest = R;
    }
    // If largest is not root
    if (largest != i) 
    {
        swap(arr[i], arr[largest]);

        // Recursively heapify the affected
        // sub-tree
        heapify(arr, size, largest);
    }
}

// Main function to do heap sort
void heapSort(int* data,const int& size)
{
    // Build heap (rearrange array)
    for (int i = size / 2 - 1; i >= 0; i--)
    {
        heapify(data, size, i);
    }
    // One by one extract an element
    // from heap
    for (int i = size - 1; i > 0; i--) 
    {
        // Move current root to end
        swap(data[0], data[i]);
        // call max heapify on the reduced heap
        heapify(data, i, 0);
    }
}



int main()
{
    int data[]{ 5,3,7 };
    //int data[]{ 1,2,3,4,5,6,7,8,9 };
    const int size{ sizeof(data) / sizeof(data[0]) };


    heapSort(data, size);
    print(data, size);
    // insertionSort(data,size);
    



    return 0;
}
